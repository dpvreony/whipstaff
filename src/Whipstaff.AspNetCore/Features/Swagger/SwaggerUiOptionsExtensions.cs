// Copyright (c) 2022 DHGMS Solutions and Contributors. All rights reserved.
// This file is licensed to you under the MIT license.
// See the LICENSE file in the project root for full license information.

using System;
using System.IO;
using System.Text;
using Microsoft.AspNetCore.Http;
using NetEscapades.AspNetCore.SecurityHeaders;
using Swashbuckle.AspNetCore.SwaggerUI;

namespace Whipstaff.AspNetCore.Features.Swagger
{
    /// <summary>
    /// Extensions for <see cref="SwaggerUIOptions"/>.
    /// </summary>
    public static class SwaggerUIOptionsExtensions
    {
        /// <summary>
        /// Applies nonces to inline scripts and styles in the swagger index page.
        /// </summary>
        /// <param name="swaggerUiOptions">Swagger UI options instance to modify.</param>
        /// <param name="httpContextAccessor">HTTP Context Accessor for the HTTP request.</param>
        public static void ApplyNonceToSwaggerIndexStream(this SwaggerUIOptions swaggerUiOptions, IHttpContextAccessor httpContextAccessor)
        {
            ArgumentNullException.ThrowIfNull(swaggerUiOptions);

            // taken from https://mderriey.com/2020/12/14/how-to-lock-down-csp-using-swachbuckle/
            // 2. Take a reference of the original Stream factory which reads from Swashbuckle's embedded resources
            var originalIndexStreamFactory = swaggerUiOptions.IndexStream;

            // 3. Override the Stream factory
            swaggerUiOptions.IndexStream = () => ApplyNonceToSwaggerIndexPage(originalIndexStreamFactory, httpContextAccessor);
        }

        private static Stream ApplyNonceToSwaggerIndexPage(
            Func<Stream> originalIndexStreamFactory,
            IHttpContextAccessor httpContextAccessor)
        {
            // 4. Read the original index.html file
            using var originalStream = originalIndexStreamFactory();
            using var originalStreamReader = new StreamReader(originalStream);
            var originalIndexHtmlContents = originalStreamReader.ReadToEnd();

            // 5. Get the request-specific nonce generated by NetEscapades.AspNetCore.SecurityHeaders
            var requestSpecificNonce = httpContextAccessor.HttpContext!.GetNonce();

            // 6. Replace inline `<script>` and `<style>` tags by adding a `nonce` attribute to them
            var nonceEnabledIndexHtmlContents = originalIndexHtmlContents
                .Replace("<script>", $"<script nonce=\"{requestSpecificNonce}\">", StringComparison.OrdinalIgnoreCase)
                .Replace("<style>", $"<style nonce=\"{requestSpecificNonce}\">", StringComparison.OrdinalIgnoreCase);

            // 7. Return a new Stream that contains our modified contents
            return new MemoryStream(Encoding.UTF8.GetBytes(nonceEnabledIndexHtmlContents));
        }
    }
}
