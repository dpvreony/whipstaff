<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <LangVersion>latest</LangVersion>
    <NoWarn>$(NoWarn);NU5128;NU5100</NoWarn>
    <PackageDescription>re-usable logic for working with Mermaid within an InMemory HTTP service.</PackageDescription>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Mvc.Testing" Version="8.0.17" />
    <PackageReference Include="TestableIO.System.IO.Abstractions" Version="22.0.15" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="HttpServer\wwwroot\" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Whipstaff.Core\Whipstaff.Core.csproj" />
    <ProjectReference Include="..\Whipstaff.Playwright\Whipstaff.Playwright.csproj" />
  </ItemGroup>
  <Target Name="CopyNpmTasks" BeforeTargets="BeforeBuild">
    <!-- these tasks remove the need for gulp, grunt, npm, etc. to be used for file copying -->
    <ItemGroup>
      <!--
    TODO: reduce the number of files being pulled by looking to see which files are minified...
    This will reduce the size of the nuget pkg by about 50%
    -->
      <NpmMermaidFilesToCopy Include="$(ProjectDir)node_modules\mermaid\dist\**\*.js" />
      <NpmMermaidFilesToCopy Include="$(ProjectDir)node_modules\mermaid\dist\**\*.mjs" />
    </ItemGroup>
    <Message Text="Starting NPM Package Copy Task" Importance="High" />
    <Copy SkipUnchangedFiles="True" SourceFiles="@(NpmMermaidFilesToCopy)" DestinationFiles="@(NpmMermaidFilesToCopy->'$(ProjectDir)HttpServer\wwwroot\lib\mermaid\%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>
  <Target Name="RestoreNpm" BeforeTargets="CopyNpmTasks">
    <Exec Command="npm install" ConsoleToMSBuild="true" />
  </Target>
  <!--
  Based upon:
  https://nietras.com/2020/10/04/gzip-embeddedresource/
  https://github.com/nietras/GZipEmbeddedResource
  -->
  <UsingTask TaskName="GZip"
             TaskFactory="RoslynCodeTaskFactory"
             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]"
             Required="true" />
      <Result ParameterType="Microsoft.Build.Framework.ITaskItem[]"
              Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
    if (Files.Length > 0)
    {
        Result = new TaskItem[Files.Length];
        for (int i = 0; i < Files.Length; i++)
        {
            ITaskItem item = Files[i];
            string sourcePath = item.GetMetadata("FullPath");
            if (!sourcePath.EndsWith(".js") && !sourcePath.EndsWith(".mjs"))
            {
              continue;
            }

            string sourceItemSpec = item.ItemSpec;

            string destinationSuffix = ".gz";
            string destinationPath = sourcePath + destinationSuffix;
            string destinationItemSpec = sourceItemSpec + destinationSuffix;

            Log.LogMessage(MessageImportance.Normal, 
                "EmbeddedResource Src : " + sourceItemSpec);
                  
            using (var sourceStream = File.OpenRead(sourcePath))
            using (var destinationStream = File.OpenWrite(destinationPath))
            using (var destinationGZip = new GZipStream(destinationStream, 
              CompressionLevel.Optimal))
            {
                sourceStream.CopyTo(destinationGZip);
            }
                  
            var destinationItem = new TaskItem(destinationItemSpec);
            
            Log.LogMessage(MessageImportance.Normal, 
                "EmbeddedResource GZip: " + destinationItem.ItemSpec);
                  
            Result[i] = destinationItem;
        }
    }
  ]]>
      </Code>
    </Task>
  </UsingTask>
  <Target Name="GZipResources" AfterTargets="CopyNpmTasks" BeforeTargets="BeforeBuild">
    <ItemGroup>
      <EmbeddedResource Include="HttpServer\wwwroot\**\*.*" />
    </ItemGroup>
    <GZip Files="@(EmbeddedResource)">
      <Output ItemName="GZipEmbeddedResource" TaskParameter="Result" />
    </GZip>
    <Message Text="Source EmbeddedResources: @(EmbeddedResource)" Importance="High" />
    <Message Text="GZipped EmbeddedResources: @(GZipEmbeddedResource)" Importance="High" />
    <ItemGroup>
      <EmbeddedResource Remove="@(EmbeddedResource)" />
      <EmbeddedResource Include="@(GZipEmbeddedResource)" />
    </ItemGroup>
  </Target>
  <Target Name="DeleteMermaidFiles" BeforeTargets="CopyNpmTasks" AfterTargets="RestoreNpm">
    <Message Text="Deleting files" Importance="High" />
    <ItemGroup>
      <FilesToDelete Include="$(ProjectDir)HttpServer\wwwroot\lib\mermaid\**\*.js"/>
      <FilesToDelete Include="$(ProjectDir)HttpServer\wwwroot\lib\mermaid\**\*.mjs"/>
      <FilesToDelete Include="$(ProjectDir)HttpServer\wwwroot\lib\mermaid\**\*.gz"/>
    </ItemGroup>
    <Message Text="Files to delete: @(FilesToDelete)" Importance="High" />
    <Delete Files="@(FilesToDelete)" />
  </Target>
</Project>
