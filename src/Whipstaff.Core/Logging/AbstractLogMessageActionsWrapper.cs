// Copyright (c) 2022 DHGMS Solutions and Contributors. All rights reserved.
// This file is licensed to you under the MIT license.
// See the LICENSE file in the project root for full license information.

using System;
using Microsoft.Extensions.Logging;

namespace Whipstaff.Core.Logging
{
    /// <summary>
    /// Abstraction for combining a logger and log message actions into a tightly coupled object to allow a single argument to be passed into a constructor.
    ///
    /// The reason the message actions and logger are passed into this object instead of the message actions being hosted in this class is to allow the
    /// application host to control the lifetime of the message actions. It's down to the user to decide if they want to cache them as singleton, which
    /// may be worthwhile for a hot path, but not for a piece of logic called once an hour etc.
    ///
    /// The intention to simplify the creation and consumption of subclasses is to have them generated by nucleotide.
    /// </summary>
    /// <typeparam name="TCategoryName">The type whose name is used for the logger category name.</typeparam>
    /// <typeparam name="TLogMessageActions">The type for the log message actions.</typeparam>
    public abstract class AbstractLogMessageActionsWrapper<TCategoryName, TLogMessageActions> : ILogMessageActionsWrapper<TCategoryName>
        where TCategoryName : class
        where TLogMessageActions : ILogMessageActions<TCategoryName>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AbstractLogMessageActionsWrapper{TCategoryName, TLogMessageActions}"/> class.
        /// </summary>
        /// <param name="logMessageActions">Log Message Actions instance.</param>
        /// <param name="logger">Logging framework instance.</param>
        protected AbstractLogMessageActionsWrapper(
            TLogMessageActions logMessageActions,
            ILogger<TCategoryName> logger)
        {
            if (logMessageActions == null)
            {
                throw new ArgumentNullException(nameof(logMessageActions));
            }

            if (logger == null)
            {
                throw new ArgumentNullException(nameof(logger));
            }

            LogMessageActions = logMessageActions;
            Logger = logger;
        }

        /// <inheritdoc/>
        public ILogger<TCategoryName> Logger { get; }

        /// <summary>
        /// Gets the log message actions.
        /// </summary>
        protected TLogMessageActions LogMessageActions { get; }
    }
}
